/* Based on http://eslint.org/docs/rules/ */
{
    /* Specifying Environments */
    "env": {
        "browser": false,
        "node": false,
        "amd": false
    },

    "rules": {
        /*Possible Errors*/
        "no-cond-assign": 2,
        "no-console": 2,
        "no-constant-condition": 2,
        "no-comma-dangle": 2,
        "no-control-regex": 2,
        "no-debugger": 2,
        "no-dupe-keys": 2,
        "no-empty": 2,
        "no-empty-class": 2,
        "no-ex-assign": 2,
        "no-extra-boolean-cast": 2,
        "no-extra-parens": 0, // disallow unnecessary parentheses
        "no-extra-semi": 2,
        "no-func-assign": 2,
        "no-inner-declarations": [2, "functions"],
        "no-invalid-regexp": 2,
        "no-negated-in-lhs": 2,
        "no-obj-calls": 2,
        "no-regex-spaces": 2,
        "no-sparse-arrays": 2,
        "no-unreachable": 2,
        "use-isnan": 2,
        "valid-jsdoc": 0, // Ensure JSDoc comments are valid
        "valid-typeof": 2,

        /* Best Practices */
        "block-scoped-var": 0, // treat var statements as if they were block scoped
        "complexity": [2, 5], // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return": 2,
        "curly": [2, "all"],
        "default-case": 2, // require default case in switch statements
        "dot-notation": 2,
        "eqeqeq": 2,
        "guard-for-in": 2, // make sure for-in loops have an if statement
        "no-alert": 2,
        "no-caller": 2,
        "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression
        "no-else-return": 2, // disallow else after a return in an if
        "no-empty-label": 2,
        "no-eq-null": 2, // disallow comparisons to null without a type-checking operator
        "no-eval": 2,
        "no-extend-native": 2,
        "no-fallthrough": 2,
        "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals 
        "no-implied-eval": 2,
        "no-labels": 2,
        "no-iterator": 2,
        "no-lone-blocks": 2,
        "no-loop-func": 2,
        "no-multi-str": 2,
        "no-native-reassign": 2,
        "no-new": 2,
        "no-new-func": 2,
        "no-new-wrappers": 2,
        "no-octal": 2,
        "no-octal-escape": 2,
        "no-proto": 2,
        "no-redeclare": 2,
        "no-return-assign": 2,
        "no-script-url": 2,
        "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
        "no-sequences": 2,
        "no-unused-expressions": 2,
        "no-warning-comments": [0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }], // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
        "no-with": 2,
        "no-yoda": 2,
        "radix": 2, // require use of the second argument for parseInt()
        "wrap-iife": 0, // require immediate function invocation to be wrapped in parentheses
        
        /* Strict Mode */
        "no-global-strict": 0, // disallow the "use strict" pragma in the global scope
        "no-extra-strict": 2,
        "strict": 2,

        /* Variables */
        "no-catch-shadow": 2,
        "no-delete-var": 2,
        "no-label-var": 2,
        "no-shadow": 2,
        "no-shadow-restricted-names": 2,
        "no-undef": 2,
        "no-undef-init": 2,
        "no-unused-vars": [2, {"vars": "all", "args": "after-used"}],
        "no-use-before-define": 2,

        /* Node.js */
        "handle-callback-err": 0, // enforces error handling in callbacks
        "no-mixed-requires": [0, false], // disallow mixing regular variable and require declarations
        "no-new-require": 0, // disallow use of new operator with the require function
        "no-path-concat": 0, // disallow string concatenation with __dirname and __filename
        "no-process-exit": 2, // disallow process.exit()
        "no-restricted-modules": 0, // restrict usage of specified node modules
        "no-sync": 0, // disallow use of synchronous methods

        /* Stylistic Issues */
        "brace-style": [2, "stroustrup"], // enforce one true brace style
        "camelcase": 2,
        "consistent-this": [0, "self"], // enforces consistent naming when capturing the current execution context 
        "func-names": 0, // require function expressions to have a name
        "func-style": [0, "declaration"], //  enforces use of function declarations or expressions
        "new-cap": 2,
        "new-parens": 2,
        "no-nested-ternary": 0, // disallow nested ternary expressions
        "no-array-constructor": 2,
        "no-lonely-if": 2, // disallow if as the only statement in an else block
        "no-new-object": 2,
        "no-spaced-func": 2,
        "no-space-before-semi": 2,
        "no-ternary": 0, // disallow the use of ternary operators
        "no-trailing-spaces": 0,
        "no-undefined": 0,
        "no-underscore-dangle": 2,
        "no-wrap-func": 2,
        "max-nested-callbacks": [2, 2], // specify the maximum depth callbacks can be nested 
        "one-var": 0,
        "quote-props": 0, // require quotes around object literal property names
        "quotes": [2, "simple"],
        "semi": 2,
        "sort-vars": 0,
        "space-after-keywords": [0, "always"],
        "space-in-brackets": [0, "never"],
        "space-infix-ops": 2,
        "space-return-throw-case": 2,
        "space-unary-word-ops": 2, // require a space around word operators such as typeof
        "wrap-regex": 2, // require regex literals to be wrapped in parentheses

        /* Legacy */
        "max-depth": [2, 4],
        "max-len": [2, 120, 4],
        "max-params": [2, 5],
        "max-statements": [2, 20], 
        "no-bitwise": 2,
        "no-plusplus": 0

    }
}